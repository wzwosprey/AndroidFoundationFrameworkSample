package com.example.wangzw.mybase.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wangzw.mybase.greendao.entity.UserInfoGreenDaoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_GREEN_DAO_BEAN".
*/
public class UserInfoGreenDaoBeanDao extends AbstractDao<UserInfoGreenDaoBean, String> {

    public static final String TABLENAME = "USER_INFO_GREEN_DAO_BEAN";

    /**
     * Properties of entity UserInfoGreenDaoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "user_id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Gender = new Property(2, Integer.class, "gender", false, "gender");
        public final static Property Age = new Property(3, Integer.class, "age", false, "age");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "avatar");
        public final static Property Phone = new Property(5, String.class, "phone", false, "phone");
        public final static Property Address = new Property(6, String.class, "address", false, "address");
    }


    public UserInfoGreenDaoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoGreenDaoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_GREEN_DAO_BEAN\" (" + //
                "\"user_id\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: userId
                "\"name\" TEXT," + // 1: name
                "\"gender\" INTEGER," + // 2: gender
                "\"age\" INTEGER," + // 3: age
                "\"avatar\" TEXT," + // 4: avatar
                "\"phone\" TEXT," + // 5: phone
                "\"address\" TEXT);"); // 6: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_GREEN_DAO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoGreenDaoBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(3, gender);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(4, age);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoGreenDaoBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUserId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(3, gender);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(4, age);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public UserInfoGreenDaoBean readEntity(Cursor cursor, int offset) {
        UserInfoGreenDaoBean entity = new UserInfoGreenDaoBean( //
            cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // gender
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // age
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // address
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoGreenDaoBean entity, int offset) {
        entity.setUserId(cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGender(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAge(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfoGreenDaoBean entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(UserInfoGreenDaoBean entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoGreenDaoBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
